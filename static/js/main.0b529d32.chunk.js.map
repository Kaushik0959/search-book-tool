{"version":3,"sources":["rootReducer.js","screens/home/reducers.js","screens/home/actionTypes.js","configureStore.js","components/Header.js","components/Footer.js","screens/home/actions.js","screens/home/containers/Search.js","screens/home/components/BookCard.js","screens/home/containers/Books.js","screens/home/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["history","initalState","query","isFetching","data","error","books","state","arguments","length","undefined","action","type","Object","assign","status","payload","createHashHistory","store","createStore","combineReducers","router","connectRouter","composeWithDevTools","applyMiddleware","routerMiddleware","thunk","Header","react_default","a","createElement","id","Navbar","bg","expand","Brand","href","Footer","Date","getFullYear","receiveBooks","_ref","getBooks","dispatch","requestBooks","url","concat","axios","get","then","response","catch","connect","bindActionCreators","debouncedGetBooks","debounce","className","Form","onSubmit","e","preventDefault","Group","controlId","Control","onChange","target","value","placeholder","Text","Button","variant","BookCard","book","console","log","title","subtitle","author_name","first_sentence","imageLinks","publish_date","description","Card","Img","src","thumbnail","Body","Title","Subtitle","join","_state$books","renderedElements","isEmpty","docs","total","numFound","Fragment","map","components_BookCard","key","renderBooksList","JSON","stringify","Home","containers_Search","containers_Books","routes","react_router","exact","path","component","App","es","esm","components_Header","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b529d32.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\n\n// Import your Module reducers here and combine them\nimport { books } from './screens/home/reducers'\n\nexport default (history) => combineReducers({\n  router: connectRouter(history),\n  // rest of your reducers\n  books\n});","import { REQUEST_BOOKS, RECEIVE_BOOKS } from './actionTypes'\n\nconst initalState = {\n  query: '',\n  isFetching: false,\n  data: {},\n  error: ''\n}\n\nexport const books = (state = initalState, action) => {\n  switch (action.type) {\n    case REQUEST_BOOKS:\n      return Object.assign({}, state, {\n        isFetching: true,\n        query: action.query\n      })\n    case RECEIVE_BOOKS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        data: action.status === 'success' ? action.payload : initalState.data,\n        error: action.status === 'error' ? action.payload : initalState.error\n      })\n    default:\n      return state;\n  }\n}","// Action types\n\nexport const REQUEST_BOOKS = 'REQUEST_BOOKS'\nexport const RECEIVE_BOOKS = 'RECEIVE_BOOKS'","import { createHashHistory } from 'history'\nimport { applyMiddleware, createStore } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createRootReducer from './rootReducer'\nimport thunk from 'redux-thunk';\n// Create history\nexport const history = createHashHistory();\n\n// Define on your own as per requirment\nconst preloadedState = {};\n\nconst store = createStore(\n  createRootReducer(history), // Root reducer with router state\n  preloadedState,\n  composeWithDevTools(\n    applyMiddleware(\n      routerMiddleware(history),\n      thunk\n    ),\n  )\n)\nexport default store;\n","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nconst Header = () => (\n  <header id=\"app-header\">\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#/\">Searh Book Tool App</Navbar.Brand>\n    </Navbar>\n  </header>\n);\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => (\n  <footer id=\"app-footer\">\n    Seach Book Tool &copy; {new Date().getFullYear()}\n  </footer>\n);\nexport default Footer;\n","import axios from \"axios\";\nimport { REQUEST_BOOKS, RECEIVE_BOOKS } from \"./actionTypes\";\n\nexport const requestBooks = (query) => ({\n  type: REQUEST_BOOKS,\n  query,\n});\n\nexport const receiveBooks = ({ status, payload }) => ({\n  type: RECEIVE_BOOKS,\n  status,\n  payload,\n});\n\nexport const getBooks = (query) => {\n  return function (dispatch) {\n    dispatch(requestBooks(query));\n    const url = `http://openlibrary.org/search.json?title=${query}`;\n    return axios\n      .get(url)\n      .then((response) => {\n        dispatch(\n          receiveBooks({\n            status: \"success\",\n            payload: response.data,\n          })\n        );\n      })\n      .catch((error) => {\n        dispatch(\n          receiveBooks({\n            status: \"error\",\n            payload: error,\n          })\n        );\n      });\n  };\n};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { getBooks } from \"../actions\";\nimport debounce from \"lodash/debounce\";\n\nconst Search = ({ getBooks, query }) => {\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n  };\n  const debouncedGetBooks = debounce((query) => {\n    getBooks(query);\n  }, 700);\n\n  const onInputChange = (e) => {\n    debouncedGetBooks(e.target.value);\n  };\n\n  return (\n    <div className=\"search-books\">\n      <Form className=\"search-books--form\" onSubmit={handleOnSubmit}>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Control\n            type=\"text\"\n            onChange={onInputChange}\n            placeholder=\"Java programming, C programming\"\n          />\n          <Form.Text className=\"text-muted\">Search by book title.</Form.Text>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Find\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    query: state.books.query,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      getBooks,\n    },\n    dispatch\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Card from \"react-bootstrap/Card\";\n\nconst BookCard = ({ book }) => {\n  console.log(book);\n  let {\n    title,\n    subtitle,\n    author_name,\n    first_sentence,\n    imageLinks,\n    publish_date,\n    description,\n  } = book;\n  return (\n    <div className=\"book\">\n      <Card>\n        {imageLinks ? (\n          <Card.Img variant=\"top\" src={imageLinks.thumbnail} />\n        ) : null}\n        <Card.Body>\n          <Card.Title>Title: {title}</Card.Title>\n          <Card.Subtitle>Subtitle: {subtitle}</Card.Subtitle>\n          <Card.Text>Author: {author_name && author_name.join(\",\")}</Card.Text>\n          <Card.Text className=\"book--description\">\n            Description: {first_sentence && first_sentence.join(\" \")}\n          </Card.Text>\n          <Card.Text className=\"book--description\">\n            Published Date: {publish_date && publish_date.join(\" \")}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default BookCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport isEmpty from \"lodash/isEmpty\";\n\nimport BookCard from \"../components/BookCard\";\n\nconst renderBooksList = (data, query) => {\n  if (isEmpty(data)) {\n    return null;\n  }\n  let { docs: books, numFound: total } = data;\n\n  return (\n    <>\n      <h3>Search results for title: {query}</h3>\n      <p>Total Results: {total}</p>\n      <div className=\"books-list\">\n        {books.map((book) => (\n          <BookCard key={book.key} book={book} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nconst Books = ({ data, isFetching, query, error }) => {\n  let renderedElements = \"\";\n\n  if (isFetching) {\n    renderedElements = <p>Searching Book...</p>;\n  } else if (!isEmpty(error)) {\n    renderedElements = JSON.stringify(error);\n  } else {\n    renderedElements = renderBooksList(data, query);\n  }\n  return <div className=\"books\">{renderedElements}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  let { data, isFetching, query, error } = state.books;\n  return {\n    data,\n    isFetching,\n    query,\n    error,\n  };\n};\n\nexport default connect(mapStateToProps, null)(Books);\n","import React from 'react';\nimport Search from './containers/Search'\nimport Books from './containers/Books'\nimport './home.css'\n\n\nconst Home = () => (\n  <div id=\"home\" className=\"page\">\n    <div className=\"container\">\n      <Search />\n      <Books />\n    </div>\n  </div>\n)\nexport default Home;","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\n// Configure routes\nimport Home from \"./screens/home\";\n\nexport default (\n  <Switch>\n    <Route exact path=\"/\" component={Home} />\n  </Switch>\n);\n","import React from 'react';\n\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport store, { history } from './configureStore';\n\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\nimport routes from './routes'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <div className=\"app\">\n          <Header />\n          <main>\n            {routes}\n          </main>\n          <Footer />\n        </div>\n      </ConnectedRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}